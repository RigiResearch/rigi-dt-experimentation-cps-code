-- @atlcompiler emftvm
-- @nsURI openapi=http://som.uoc.edu/openapi/2.0.0
-- @nsURI monitoring=http://www.rigiresearch.com/middleware/monitoring/1.0.0


--- This module creates a set of monitors based on the GET paths from the
--- provided OpenAPI model. The mapping model is used to create the equivalences
--- between the OpenAPI schemas and entities from the semantic model.

module OpenAPI2Monitoring;
create OUT: monitoring from IN: openapi;

--- helper openapi!Schema getDataType: returns the appropriate data type (i.e.,
--- primitive, object or array) in the monitoring model for a particular
--- OpenAPI schema.
helper context openapi!Schema def: getDataType(): monitoring!DataType =
	let type: monitoring!DataType =
		OclUndefined
	in
		if self.type = #array then
			thisModule._getArray(self)
		else
			if self.type = #object then
				thisModule._getSchema(self)
			else
				-- Type reference (Schema without type)
				if self.type = #unspecified and not (self.value = OclUndefined) then
					self.value->getDataType()
				else
					-- JSONSchemaSubset
					thisModule._getDataType(self.type)
				endif
			endif
		endif;

--- helper openapi!Parameter getDataType: returns the appropriate data type
--- (i.e., primitive, object or array) in the monitoring model for a particular
--- OpenAPI parameter.
helper context openapi!Parameter def: getDataType(): monitoring!DataType =
	if self.schema = OclUndefined then
		if self.items = OclUndefined then
			-- JSONSchemaSubset
			thisModule._getDataType(self.type)
		else
			-- ArrayContext
			thisModule._getArrayFromContext(self)
		endif
	else
		-- SchemaContext
		thisModule._getSchema(self.schema)
	endif;

--- helper openapi!ArrayContext getDataType: returns the appropriate data type
--- (i.e., primitive, object or array) in the monitoring model for a particular
--- OpenAPI array context.
helper context openapi!ArrayContext def: getDataType(): monitoring!DataType =
	if self.items = OclUndefined then
		-- JSONSchemaSubset
		thisModule._getDataType(self.type)
	else
		-- ArrayContext
		thisModule._getArrayFromContext(self)
	endif;


-- Matched rules

rule Root {
	from
		i: openapi!Root
	to
		o: monitoring!Root (
			host <- i.api.host,
			basePath <- i.api.basePath,
			https <- i.api.schemes -> select(s | s = #https).notEmpty(),
			authMethods <- i.api.securityDefinitions -> collect(d | thisModule.resolveTemp(d, 'o')),
			authRequirements <- i.api.securityRequirements -> collect(s | thisModule.resolveTemp(s, 'o')),
			monitors <- i.api.paths
				-> select(p | not p.get.oclIsUndefined())
				-> select(p | not p.get.responses
					-> select(p | p.code = '200')
					-> collect(p | p.schema).isEmpty())
				-> collect(p | thisModule.resolveTemp(p, 'o'))
		)
}

rule AuthRequirement {
	from
		i: openapi!SecurityRequirement
	to
		o: monitoring!AuthRequirement (
			scopes <- i.securityScopes -> collect(s | s.name),
			method <- thisModule.resolveTemp(i.securitySchema, 'o')
		)
}

rule BasicSecuritySchema {
	from
		i: openapi!SecuritySchema (i.type = #basic)
	to
		o: monitoring!BasicAuth (
			id <- i.referenceName
		)
}

rule ApiKeySecuritySchema {
	from
		i: openapi!SecuritySchema (i.type = #apiKey)
	to
		o: monitoring!ApiKeyAuth (
			id <- i.referenceName,
			property <- p
		),
		p: monitoring!LocatedProperty (
			name <- i.name,
			required <- true,
			type <- t,
			location <- i.location
		),
		t: monitoring!DataType (
			type <- #string
		)
}

rule Oauth2SecuritySchema {
	from
		i: openapi!SecuritySchema (i.type = #oauth2)
	to
		o: monitoring!Oauth2Auth (
			id <- i.referenceName,
			flow <- i.flow,
			authorizationUrl <- i.authorizationUrl,
			tokenUrl <- i.tokenUrl,
			scopes <- i.scopes -> select(s | s.name)
		)
}

rule Monitor {
	from
		i: openapi!Path (not i.get.oclIsUndefined())
	to
		o: monitoring!Monitor (
			path <- p,
			schema <- thisModule._getSchema(
				i.get.responses
					-> select(r | r.code = '200')
					-> collect(r | r.schema)
					-> first()
			),
			rate <- e
		),
		p: monitoring!Path (
			id <- i.get.operationId,
			url <- i.relativePath,
			parameters <- i.get.parameters
				-> collect(z | thisModule.resolveTemp(z, 'o')),
			authRequirements <- i.get.securityRequirements
				-> collect(s | thisModule.resolveTemp(s, 'o'))
		),
		e: monitoring!CronExpression (
			-- Use the default expression value
		)
}

rule Parameter {
	from
		i: openapi!Parameter
	to
		o: monitoring!LocatedProperty (
			name <- i.name,
			type <- i -> getDataType(),
			location <- i.location,
			required <- not i.required.oclIsUndefined() and i.required
		)
}

-- Lazy rules

lazy rule _getSchema {
	from
		os: openapi!Schema
	to
		ms: monitoring!Schema (
			type <- os.type,
			properties <- os.properties
				-> collect(s | thisModule._getProperty(s))
		)
}

lazy rule _getArray {
	from
		os: openapi!Schema
	to
		mp: monitoring!Array (
			type <- os.type,
			subtype <- os.items -> getDataType()
		)
}

lazy rule _getArrayFromContext {
	from
		oa: openapi!ArrayContext
	to
		mp: monitoring!Array (
			type <- #array,
			subtype <- oa.items -> getDataType()
		)
}

lazy rule _getProperty {
	from
		os: openapi!Schema
	to
		mp: monitoring!Property (
			name <- os.name,
			type <- os -> getDataType()
		)
}

lazy rule _getDataType {
	from
		ot: openapi!JSONDataType
	to
		mt: monitoring!DataType (
			type <- ot
		)
}
