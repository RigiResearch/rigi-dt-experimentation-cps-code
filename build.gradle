plugins {
    id 'maven'
    id 'eclipse'
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.ksoichiro.console.reporter' version '0.6.2'
    id 'org.xtext.builder' version '2.0.8' apply false
    id 'org.xtext.xtend' version '2.0.8' apply false
}

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'

    group = 'com.rigiresearch.${rootProject.name}'
    version = '0.1.0'

    jacoco {
        toolVersion = '0.8.5'
    }

    pmd {
        consoleOutput = true
        toolVersion = '6.26.0'
        ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
        // It must be empty for exclusions to work
        // From https://stackoverflow.com/a/34145485
        ruleSets = []
    }

    checkstyle {
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    }
}

subprojects { project ->

    apply plugin: 'java'
    apply from: "${rootDir}/gradle/sourceLayout.gradle"
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        // Tests
        testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'

        // Logs
        implementation 'ch.qos.logback:logback-classic:1.2.3'

        // Annotation processor to ease development
        implementation 'org.projectlombok:lombok:1.18.6'
        annotationProcessor 'org.projectlombok:lombok:1.18.6'
    }

    configurations.all {
        exclude group: 'asm'
    }

    test {
        useJUnitPlatform()
        if (System.properties['skip.integration'] == 'true') {
            exclude '**/*integration*'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = false
            csv.enabled = false
            html {
                enabled = true
                destination = file("${buildDir}/reports/jacoco")
            }
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.0
                }
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    test.finalizedBy(project.tasks.jacocoTestReport)

    consoleReporter {
        cobertura.enabled = false
    }
}
